import asyncio
import logging
import os
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums.chat_member_status import ChatMemberStatus
from aiogram.filters import CommandStart, Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.storage.memory import MemoryStorage
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_USERNAME = os.getenv("CHANNEL_USERNAME")  # –ü—Ä–∏–º–µ—Ä: @bobscience

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# /post ‚Äî –ø—É–±–ª–∏–∫—É–µ—Ç –ø–æ—Å—Ç —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π –∏ –∫–Ω–æ–ø–∫–æ–π-—Å—Å—ã–ª–∫–æ–π –≤ –∫–∞–Ω–∞–ª
@dp.message(Command("post"))
async def post_to_channel(message: types.Message):
    try:
        await bot.send_photo(
            chat_id=CHANNEL_USERNAME,
            photo=types.FSInputFile("Post_button.jpg"),  # –ö–∞—Ä—Ç–∏–Ω–∫–∞ –≤ –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞
            caption="üß† <b>–•–æ—á–µ—à—å –≤—Å—ë –∑–Ω–∞—Ç—å!?</b>\n\n"
                    "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(
                        text="üí° –•–û–ß–£ –í–°–Å –ó–ù–ê–¢–¨ üí°",
                        url="https://t.me/bobscience_bot?start=TGkanal"
                    )]
                ]
            )
        )
        await message.answer("‚úÖ –ü–æ—Å—Ç —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π –∏ –∫–Ω–æ–ø–∫–æ–π —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ—Å—Ç–∞: {e}")

# /start?start=TGkanal ‚Äî –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∏–∑ –ø–æ—Å—Ç–∞
@dp.message(CommandStart(deep_link=True))
async def handle_start_with_param(message: types.Message, command: CommandStart):
    user_id = message.from_user.id

    if command.args == "TGkanal":
        try:
            member = await bot.get_chat_member(chat_id=CHANNEL_USERNAME, user_id=user_id)
            if member.status in [ChatMemberStatus.MEMBER, ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.CREATOR]:
                return  # —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
            else:
                await message.answer(
                    "üîí <b>–î–æ—Å—Ç—É–ø –∫ –∑–Ω–∞–Ω–∏—è–º —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞</b>\n\n"
                    "1. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª @bobscienceüëà\n"
                    "2. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è¬ªüëá",
                    parse_mode="HTML",
                    reply_markup=InlineKeyboardMarkup(
                        inline_keyboard=[
                            [InlineKeyboardButton(text="üì≤ –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª", url="https://t.me/bobscience")],
                            [InlineKeyboardButton(text="‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="check_TGkanal")]
                        ]
                    )
                )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏ TGkanal: {e}")
            await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ ¬´–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è¬ª
@dp.callback_query(F.data == "check_TGkanal")
async def check_subscription_TGkanal(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    try:
        member = await bot.get_chat_member(chat_id=CHANNEL_USERNAME, user_id=user_id)
        if member.status in [ChatMemberStatus.MEMBER, ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.CREATOR]:
            await callback.answer("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!", show_alert=True)
            await callback.message.edit_text("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –ü–æ–ª—É—á–∏—Ç–µ –≤–∞—à–∏ –∑–Ω–∞–Ω–∏—è:")

            # üìé –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞
            await bot.send_document(
                chat_id=user_id,
                document=types.FSInputFile("–†–µ—Ñ–µ—Ä–∞—Ç_–õ–∏–º–æ–Ω–Ω–∞—è_–±–∞—Ç–∞—Ä–µ–∏ÃÜ–∫–∞_docx_1.pdf"),
                caption="üìÑ –í–∞—à —Ñ–∞–π–ª: ¬´–†–µ—Ñ–µ—Ä–∞—Ç –õ–∏–º–æ–Ω–Ω–∞—è –±–∞—Ç–∞—Ä–µ–π–∫–∞¬ª"
            )
        else:
            await callback.answer("‚ùå –í—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã!", show_alert=True)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await bot.delete_webhook(drop_pending_updates=True)  # —É–±–∏—Ä–∞–µ–º webhook, –µ—Å–ª–∏ –±—ã–ª
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
