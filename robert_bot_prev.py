import asyncio
import logging
import os
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums.chat_member_status import ChatMemberStatus
from aiogram.filters import Command, CommandStart
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.storage.memory import MemoryStorage
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ .env
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_USERNAME = os.getenv("CHANNEL_USERNAME")  # –ü—Ä–∏–º–µ—Ä: @bobscience
OWNER_IDS = [int(id.strip()) for id in os.getenv("OWNER_IDS", "").split(",") if id.strip()]

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö ID –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∫–∞–∫ —á–∏—Å–ª–∞
OWNER_IDS = [int(uid.strip()) for uid in os.getenv("OWNER_IDS", "").split(",") if uid.strip().isdigit()]

# –ö–æ–º–∞–Ω–¥–∞ /post ‚Äî –ø—É–±–ª–∏–∫—É–µ—Ç –ø–æ—Å—Ç, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö
@dp.message(Command("post"))
async def post_to_channel(message: types.Message):
    if message.from_user.id not in OWNER_IDS:
        await message.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    try:
        await bot.send_photo(
            chat_id=CHANNEL_USERNAME,
            photo=types.FSInputFile("robert_yutube.jpg"),
            caption=(
                "–ü—Ä–∏–≤–µ—Ç! üëã –Ø –†–æ–±–µ—Ä—Ç, –∏ –µ—Å–ª–∏ —Ç—ã —Å–º–æ—Ç—Ä–µ–ª(–∞) –º–æ–π —Ä–æ–ª–∏–∫ –ø—Ä–æ ¬´–õ–∏–º–æ–Ω–Ω—É—é –±–∞—Ç–∞—Ä–µ–π–∫—É¬ª, –≤–æ—Ç —Ç–≤–æ–π –±–æ–Ω—É—Å üéÅ\n\n"
                "<b>‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è–õ–∏–º–æ–Ω—ã –∑–∞–∂–≥–ª–∏ –ª–∞–º–ø–æ—á–∫—É?! –ö–∞–∫ —è —ç—Ç–æ —Å–¥–µ–ª–∞–ª? üë®‚Äçüíª</b>\n\n"
                "–í —Ñ–∞–π–ª–µ –ø–æ–¥—Ä–æ–±–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–æ –∫–∞–∫ —ç—Ç–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∏ —É–¥–∏–≤–∏—Ç—å —Ä–æ–¥–∏—Ç–µ–ª–µ–π –∏–ª–∏ –¥—Ä—É–∑–µ–π!\n\n"
                "‚Äî –∫–∞–∫–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –Ω—É–∂–Ω—ã üçãüî©\n"
                "‚Äî –∫–∞–∫ –≤—Å—ë –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å–æ–µ–¥–∏–Ω–∏—Ç—å üîå\n"
                "‚Äî —á—Ç–æ –¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ –ª–∞–º–ø–æ—á–∫–∞ –Ω–µ –≥–æ—Ä–∏—Ç üí°\n"
                "‚Äî –ø–æ—á–µ–º—É –ª–∏–º–æ–Ω—ã –≤–æ–æ–±—â–µ –¥–∞—é—Ç —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ ‚ö°Ô∏è\n\n"
                "–ñ–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ (–ø–æ–¥–æ–∂–¥–∏—Ç–µ –∑–∞–≥—Ä—É–∑–∫—É 5-10—Å–µ–∫), —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª üëáüëáüëá"
            ),
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(
                        text="üí° –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è üí°",
                        url="https://t.me/bobscience_bot?start=TGkanal"
                    )]
                ]
            )
        )
        await message.answer("‚úÖ –ü–æ—Å—Ç —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π –∏ –∫–Ω–æ–ø–∫–æ–π —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ—Å—Ç–∞: {e}")

# /start —Å –∏ –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
@dp.message(CommandStart())
async def start_handler(message: types.Message, command: CommandStart):
    user_id = message.from_user.id

    # –û—Ç–ø—Ä–∞–≤–∏–º "–æ–±–ª–æ–∂–∫—É" –∫–∞–∫ —Ñ–æ–Ω
    await bot.send_photo(user_id, types.FSInputFile("oblozhka_fon_bota.jpg"))

    try:
        member = await bot.get_chat_member(chat_id=CHANNEL_USERNAME, user_id=user_id)
        if member.status in [ChatMemberStatus.MEMBER, ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.CREATOR]:
            await message.answer("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –í–æ—Ç –≤–∞—à —Ñ–∞–π–ª:")
            await bot.send_document(
                chat_id=user_id,
                document=types.FSInputFile("–õ–∏–º–æ–Ω–Ω–∞—è_–±–∞—Ç–∞—Ä–µ–∏ÃÜ–∫–∞_–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è_pptx_1.pdf"),
                caption="üìÑ\n"
                "–ù–µ —Å–ø–µ—à–∏—Ç–µ –∑–∞–∫—Ä—ã–≤–∞—Ç—å –±–æ—Ç–∞, –≤ –±–ª–∏–∂–∞–π—à–∏–µ 5 –¥–Ω–µ–π —è –ø—Ä–∏—à–ª—é –≤–∞–º —Ä–µ—Ñ–µ—Ä–∞—Ç –ø–æ —ç—Ç–æ–º—É —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—É.\n\n"
                "–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞ –ø–æ –Ω–æ–≤—ã–º —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–º –±—É–¥—É –≤—ã–¥–∞–≤–∞—Ç—å —Ç—É—Ç üëã"
            )
        else:
            raise Exception("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω")
    except Exception:
        await message.answer(
            "üîí <b>–î–æ—Å—Ç—É–ø –∫ –∑–Ω–∞–Ω–∏—è–º —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞</b>\n\n"
            "1. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª @bobscience üëà\n"
            "2. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è¬ª üëá",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="üì≤ –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª", url="https://t.me/bobscience")],
                    [InlineKeyboardButton(text="‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="check_TGkanal")]
                ]
            )
        )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ ¬´–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è¬ª
@dp.callback_query(F.data == "check_TGkanal")
async def check_subscription(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    try:
        member = await bot.get_chat_member(chat_id=CHANNEL_USERNAME, user_id=user_id)
        if member.status in [ChatMemberStatus.MEMBER, ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.CREATOR]:
            await callback.answer("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!", show_alert=True)
            await callback.message.edit_text("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –ü–æ–ª—É—á–∏—Ç–µ –≤–∞—à–∏ –∑–Ω–∞–Ω–∏—è:")
            await bot.send_document(
                chat_id=user_id,
                document=types.FSInputFile("–õ–∏–º–æ–Ω–Ω–∞—è_–±–∞—Ç–∞—Ä–µ–∏ÃÜ–∫–∞_–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è_pptx_1.pdf"),
                caption="üìÑ\n"
                "–ù–µ —Å–ø–µ—à–∏—Ç–µ –∑–∞–∫—Ä—ã–≤–∞—Ç—å –±–æ—Ç–∞, –≤ –±–ª–∏–∂–∞–π—à–∏–µ 5 –¥–Ω–µ–π —è –ø—Ä–∏—à–ª—é –≤–∞–º —Ä–µ—Ñ–µ—Ä–∞—Ç –ø–æ —ç—Ç–æ–º—É —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—É.\n"
                "–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞ –ø–æ –Ω–æ–≤—ã–º —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–º –±—É–¥—É –≤—ã–¥–∞–≤–∞—Ç—å —Ç—É—Ç üëã"
            )
        else:
            await callback.answer("‚ùå –í—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã!", show_alert=True)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)

# –ó–∞–ø—É—Å–∫
async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
